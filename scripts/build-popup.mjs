import fs from 'node:fs';
import path from 'node:path';

const projectRoot = path.resolve(new URL('.', import.meta.url).pathname, '..');
const entryFile = path.resolve(projectRoot, 'src/trello-power-up/popup/index.js');
const outputFile = path.resolve(projectRoot, 'src/trello-power-up/trello-player-power-up-popup.js');
const licenseBanner = `/*
 * This file is part of Audio Player Power-up for Trello.
 *
 * Copyright (c) 2025 Viktor Jevdokimov, Vilnius, Lithuania
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
// SPDX-License-Identifier: LGPL-2.1-or-later
` + '\n';
const visited = new Set();
const orderedModules = [];

function processModule(filePath) {
  const resolvedPath = path.resolve(filePath);
  if (visited.has(resolvedPath)) {
    return;
  }
  visited.add(resolvedPath);
  const code = fs.readFileSync(resolvedPath, 'utf8');
  const dir = path.dirname(resolvedPath);
  const importRegex = /import\s+[\s\S]*?from\s+['"]([^'"]+)['"];?/g;
  let match;
  while ((match = importRegex.exec(code)) !== null) {
    const importPath = match[1];
    if (importPath.startsWith('.')) {
      const dependencyPath = path.resolve(dir, importPath);
      if (!dependencyPath.endsWith('.js')) {
        processModule(`${dependencyPath}.js`);
      } else {
        processModule(dependencyPath);
      }
    }
  }
  const relativePath = path.relative(projectRoot, resolvedPath).replace(/\\/g, '/');
  const withoutImports = code.replace(/import\s+[\s\S]*?from\s+['"][^'"]+['"];?\s*/g, '');
  const withoutExports = withoutImports.replace(/export\s+(?=async\s+function|function|class|const|let|var)/g, '');
  orderedModules.push(`// Source: ${relativePath}\n${withoutExports.trim()}\n`);
}

processModule(entryFile);

const bundled = `${licenseBanner}
/* Auto-generated by scripts/build-popup.mjs. Do not edit directly. */\n(function(){\n${orderedModules.join('\n')}\n})();\n`;

fs.writeFileSync(outputFile, bundled);
