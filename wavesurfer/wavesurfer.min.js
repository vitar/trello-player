(function(w){
  function WaveSurfer(opts){
    this.container = typeof opts.container === 'string'
      ? document.querySelector(opts.container)
      : opts.container;
    this.color = opts.waveColor || '#ccc';
    this.progressColor = opts.progressColor || '#888';
    this.audio = opts.media || new Audio();
    this.canvas = document.createElement('canvas');
    this.canvas.style.width = '100%';
    this.canvas.style.height = '80px';
    this.container.appendChild(this.canvas);
    this.ctx = this.canvas.getContext('2d');
    this.buffer = null;
    this.audio.addEventListener('timeupdate', () => this._drawProgress());
    this.container.addEventListener('click', (e) => {
      const rect = this.canvas.getBoundingClientRect();
      const pct = (e.clientX - rect.left) / rect.width;
      if (this.audio.duration) this.audio.currentTime = pct * this.audio.duration;
    });
    w.addEventListener('resize', () => this._draw());
  }
  WaveSurfer.prototype.load = function(url){
    this.audio.src = url;
    this._draw();
    const ctx = new (w.AudioContext || w.webkitAudioContext)();
    fetch(url).then(r => r.arrayBuffer()).then(b => ctx.decodeAudioData(b)).then(buf => {
      this.buffer = buf;
      this._drawWave(buf);
      this._drawProgress();
    });
  };
  WaveSurfer.prototype._draw = function(){
    if(this.buffer){
      this._drawWave(this.buffer);
      this._drawProgress();
    }
  };
  WaveSurfer.prototype._drawWave = function(buffer){
    this.canvas.width = this.container.clientWidth;
    this.canvas.height = 80;
    const data = buffer.getChannelData(0);
    const step = Math.ceil(data.length / this.canvas.width);
    const amp = this.canvas.height / 2;
    this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);
    this.ctx.fillStyle = this.color;
    for(let x=0;x<this.canvas.width;x++){
      let min=1,max=-1;
      for(let i=0;i<step;i++){
        const val = data[(x*step)+i];
        if(val<min)min=val;
        if(val>max)max=val;
      }
      this.ctx.fillRect(x,(1+min)*amp,1,Math.max(1,(max-min)*amp));
    }
  };
  WaveSurfer.prototype._drawProgress = function(){
    if(!this.audio.duration)return;
    const pct = this.audio.currentTime / this.audio.duration;
    this.ctx.globalCompositeOperation = 'source-atop';
    this.ctx.fillStyle = this.progressColor;
    this.ctx.fillRect(0,0,this.canvas.width * pct,this.canvas.height);
    this.ctx.globalCompositeOperation = 'source-over';
  };
  WaveSurfer.create = function(opts){ return new WaveSurfer(opts); };
  w.WaveSurfer = WaveSurfer;
})(window);
